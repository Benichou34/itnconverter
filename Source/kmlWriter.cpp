/*
 * Copyright (c) 2022, Benichou Software
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the author nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Purpose : Writer for Google Earth file (.kml)
 *           https://developers.google.com/kml/documentation/kmlreference
 */

#include "stdafx.h"
#include <fstream>
#include "ITN Tools.h"
#include "SAXParser/SAXWriter.h"

int WriteKML(const std::wstring& strPathName, const CGpsRoute& cGpsRoute, DWORD, bool)
{
	std::ofstream ofsFile(strPathName.c_str(), std::ios_base::binary);
	if (!ofsFile)
		return S_FALSE;

	{
		SAXWriter xmlWriter(ofsFile);
		xmlWriter.declaration();

		// Header
		SAXWriter::Tag tagKml = std::move(xmlWriter.tag("kml").attribute("xmlns", "http://www.opengis.net/kml/2.2").attribute("xmlns:gx", "http://www.google.com/kml/ext/2.2"));
		SAXWriter::Tag tagDocument = std::move(xmlWriter.tag("Document").attribute("id", "DOC"));

		xmlWriter.tag("open").content("1");
		xmlWriter.tag("description").cdata("Generated by <a href=\"" SOFT_URL "\">" SOFT_FULL_NAME "</a>.");
		xmlWriter.tag("name").content(cGpsRoute.name());

		// Road
		{
			SAXWriter::Tag tagPlacemark = xmlWriter.tag("Placemark");
			xmlWriter.tag("name").content(stdx::format("Route (%d waypoints)")(cGpsRoute.size()));
			xmlWriter.tag("styleUrl").content("#roadStyle");

			SAXWriter::Tag tagMultiGeometry = xmlWriter.tag("MultiGeometry");
			SAXWriter::Tag tagLineString = xmlWriter.tag("LineString");
			SAXWriter::Tag tagCoordinates = xmlWriter.tag("coordinates");

			for (CGpsRoute::const_iterator it = cGpsRoute.begin(); it != cGpsRoute.end(); ++it)
				tagCoordinates.content(stdx::format("%f,%f,0 ")(it->lng())(it->lat()));
		}

		// Write Waypoints
		SAXWriter::Tag tagFolder = xmlWriter.tag("Folder");
		xmlWriter.tag("name").content("Waypoints");

		CGpsRoute::const_iterator itFirstElement = cGpsRoute.begin();
		CGpsRoute::const_iterator itLastElement = cGpsRoute.end();
		--itLastElement;

		for (CGpsRoute::const_iterator it = itFirstElement; it != cGpsRoute.end(); ++it)
		{
			auto writePlacemark = [&xmlWriter](const CGpsPoint& cGpsPoint, const std::string& styleUrl)
			{
				SAXWriter::Tag tagPlacemark = xmlWriter.tag("Placemark");

				if (!cGpsPoint.name().empty())
					xmlWriter.tag("name").content(cGpsPoint.name());
				if (!cGpsPoint.comment().empty())
					xmlWriter.tag("Snippet").cdata(cGpsPoint.comment());

				xmlWriter.tag("styleUrl").content(styleUrl);

				SAXWriter::Tag tagPoint = xmlWriter.tag("Point");
				xmlWriter.tag("coordinates").content(stdx::format("%f,%f,%f")(cGpsPoint.lng())(cGpsPoint.lat())(cGpsPoint.alt()));
			};

			if (it == itFirstElement)
				writePlacemark(*it, "root://styleMaps#default+nicon=0x406+hicon=0x416");
			else if (it == itLastElement)
				writePlacemark(*it, "root://styleMaps#default+nicon=0x467+hicon=0x477");
			else
				writePlacemark(*it, "root://styleMaps#default+nicon=0x447+hicon=0x457");
		}
	}

	ofsFile.close();
	return ofsFile.good() ? S_OK : S_FALSE;
}
