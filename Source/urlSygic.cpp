/*
 * Copyright (c) 2022, Benichou Software
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the author nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Purpose : Writer for Sygic URL (.html)
 *           https://www.sygic.com/fr/developers/professional-navigation-sdk/android/api-examples/custom-url
 */

#include "stdafx.h"
#include <fstream>
#include "ITN Tools.h"
#include "SAXParser/SAXWriter.h"

int WriteSygicUrl(const std::wstring& strPathName, const CGpsRoute& cGpsRoute, DWORD, bool)
{
	std::ostringstream oss;
	oss << "com.sygic.aura://coordinate";

	for (CGpsRoute::const_iterator it = cGpsRoute.begin(); it != cGpsRoute.end(); ++it)
	{
		const CGpsPoint& cGpsPoint = *it;
		oss << "|" << cGpsPoint.lng() << "|" << cGpsPoint.lat();
	}
	oss << "|drive";

	std::ofstream ofsFile(strPathName.c_str(), std::ios_base::binary);
	if (!ofsFile)
		return S_FALSE;

	{
		SAXWriter htmlWriter(ofsFile);
		htmlWriter.doctype("html");

		SAXWriter::Tag tagHtml = std::move(htmlWriter.tag("html"));
		{
			SAXWriter::Tag tagHead = std::move(htmlWriter.tag("head"));
			htmlWriter.tag("title").content(cGpsRoute.name());
		}

		SAXWriter::Tag tagBody = std::move(htmlWriter.tag("body"));
		htmlWriter.tag("p").content("Generated by ").tag("a").attribute("href", SOFT_URL).content(SOFT_FULL_NAME);

		htmlWriter.tag("p").attribute("style", "font-size: 1.5em;").content(stdx::format("Route name: %s, %d waypoints")(cGpsRoute.name())(cGpsRoute.size()));
		htmlWriter.tag("a").attribute("style", "font-size: 2em;").attribute("href", oss.str()).content("Click to open the route in Sygic");
	}

	ofsFile.close();
	return ofsFile.good() ? S_OK : S_FALSE;
}
